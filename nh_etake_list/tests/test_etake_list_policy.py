from openerp.tests import common
from datetime import datetime as dt
from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT as dtf

import logging
_logger = logging.getLogger(__name__)

from faker import Faker
fake = Faker()
seed = fake.random_int(min=0, max=9999999)


def next_seed():
    global seed
    seed += 1
    return seed


class TestETakeListPolicy(common.SingleTransactionCase):
    @classmethod
    def setUpClass(cls):
        super(TestETakeListPolicy, cls).setUpClass()
        cr, uid = cls.cr, cls.uid

        cls.users_pool = cls.registry('res.users')
        cls.groups_pool = cls.registry('res.groups')
        cls.partner_pool = cls.registry('res.partner')
        cls.activity_pool = cls.registry('nh.activity')
        cls.patient_pool = cls.registry('nh.clinical.patient')
        cls.location_pool = cls.registry('nh.clinical.location')
        cls.pos_pool = cls.registry('nh.clinical.pos')
        cls.spell_pool = cls.registry('nh.clinical.spell')
        # OPERATIONS DATA MODELS
        cls.tci_pool = cls.registry('nh.clinical.patient.tci')
        cls.form_pool = cls.registry('nh.clinical.patient.referral.form')
        cls.overview_pool = cls.registry('nh.etake_list.overview')
        cls.accept_referral_wizard = cls.registry('nh.etake_list.accept_referral_wizard')

        cls.apidemo = cls.registry('nh.clinical.api.demo')

        cls.patient_ids = cls.apidemo.build_unit_test_env2(cr, uid, context='etakelist')

        cls.wu_id = cls.location_pool.search(cr, uid, [('code', '=', 'U')])[0]
        cls.wt_id = cls.location_pool.search(cr, uid, [('code', '=', 'T')])[0]
        cls.pos_id = cls.location_pool.read(cr, uid, cls.wu_id, ['pos_id'])['pos_id'][0]
        cls.pos_location_id = cls.pos_pool.read(cr, uid, cls.pos_id, ['location_id'])['location_id'][0]

        cls.ru_id = cls.users_pool.search(cr, uid, [('login', '=', 'RU')])[0] #Receptionist on ward U
        cls.rt_id = cls.users_pool.search(cr, uid, [('login', '=', 'RT')])[0] #Receptionist on ward T
        cls.jdu_id = cls.users_pool.search(cr, uid, [('login', '=', 'JDU')])[0] #Junior Doctor on ward U
        cls.jdt_id = cls.users_pool.search(cr, uid, [('login', '=', 'JDT')])[0] #Junior Doctor on ward T
        cls.cu_id = cls.users_pool.search(cr, uid, [('login', '=', 'CU')])[0] #Consultant on ward U
        cls.ct_id = cls.users_pool.search(cr, uid, [('login', '=', 'CT')])[0] #Consultant on ward T
        cls.adt_id = cls.users_pool.search(cr, uid, [('groups_id.name', 'in', ['NH Clinical ADT Group']), ('pos_id', '=', cls.pos_id)])[0]

    def test_etake_list(self):
        cr, uid = self.cr, self.uid

        form_data = {
            'first_name': 'John',
            'last_name': 'McClane',
            'gender': 'M',
            'ethnicity': 'C',
            'source': 'gp',
            'nhs_number': '0000000001',
            'hospital_number': '0000001',
            'dob': '1988-08-14 08:08:08',
        }

        # Patient Referral
        form_id = self.form_pool.create(cr, self.cu_id, form_data)
        self.assertTrue(form_id, msg="Referral form not created")
        patient_id = self.patient_pool.search(cr, uid, [['other_identifier', '=', '0000001']])
        self.assertTrue(patient_id, msg="Patient not created")
        overview_id = self.overview_pool.search(cr, uid, [['form_id', '=', form_id]])
        self.assertTrue(overview_id, msg="Overview view not found for the patient generated by referral form")
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'Referral', msg="State is %s, it should be Referral" % overview_data['state'])
        referral_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id[0]], ['data_model', '=', 'nh.clinical.patient.referral']])
        self.assertTrue(referral_activity_ids, msg="Referral activity not triggered after referral form")
        self.assertTrue(len(referral_activity_ids) == 1, msg="There is more than one referral activity for the same patient!")
        self.assertTrue(referral_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state Referral")
        accept_wizard_id = self.accept_referral_wizard.create(cr, uid, {'referral_activity_id': referral_activity_ids[0], 'tci_location_id': self.wu_id})
        self.assertTrue(accept_wizard_id, msg="Error creating accept referral wizard")
        self.accept_referral_wizard.submit(cr, self.cu_id, [accept_wizard_id])
        referral_activity_data = self.activity_pool.read(cr, uid, referral_activity_ids[0], ['date_terminated', 'state', 'terminate_uid'])
        self.assertTrue(referral_activity_data['state'] == 'completed', msg="Referral Accepted: State not updated correctly.")
        self.assertTrue(referral_activity_data['date_terminated'], msg="Referral Accepted: Date terminated not registered.")
        self.assertTrue(referral_activity_data['terminate_uid'][0] == self.cu_id, msg="Referral Accepted: Completed by (user) not registered correctly.")
        # Patient TCI
        overview_id = self.overview_pool.search(cr, uid, [['form_id', '=', form_id]])
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'TCI', msg="State is %s, it should be To Come In" % overview_data['state'])
        tci_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id[0]], ['data_model', '=', 'nh.clinical.patient.tci']])
        self.assertTrue(tci_activity_ids, msg="To Come In activity not triggered after referral accepted")
        self.assertTrue(len(tci_activity_ids) == 1, msg="There is more than one tci activity for the same patient!")
        self.assertTrue(tci_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state To Come In")
        self.overview_pool.complete_tci(cr, self.ru_id, overview_id)
        tci_activity_data = self.activity_pool.read(cr, uid, tci_activity_ids[0], ['date_terminated', 'state', 'terminate_uid'])
        self.assertTrue(tci_activity_data['state'] == 'completed', msg="TCI Completed: State not updated correctly.")
        self.assertTrue(tci_activity_data['date_terminated'], msg="TCI Completed: Date terminated not registered.")
        self.assertTrue(tci_activity_data['terminate_uid'][0] == self.ru_id, msg="TCI Completed: Completed by (user) not registered correctly.")
        # Patient To be Clerked
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'To be Clerked', msg="State is %s, it should be To be Clerked" % overview_data['state'])
        clerking_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id[0]], ['data_model', '=', 'nh.clinical.patient.clerking']])
        self.assertTrue(clerking_activity_ids, msg="Clerking activity not triggered after patient arrival")
        self.assertTrue(len(clerking_activity_ids) == 1, msg="There is more than one clerking activity for the same patient!")
        self.assertTrue(clerking_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state To be Clerked")
        self.overview_pool.start_clerking(cr, self.jdu_id, overview_id)
        clerking_activity_data = self.activity_pool.read(cr, uid, clerking_activity_ids[0], ['state', 'user_id'])
        self.assertTrue(clerking_activity_data['state'] == 'started', msg="Clerking Started: State not updated correctly.")
        self.assertTrue(clerking_activity_data['user_id'][0] == self.jdu_id, msg="Clerking Started: Assigned user not registered correctly.")
        # Clerking in Progress
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'Clerking in Process', msg="State is %s, it should be Clerking in Process" % overview_data['state'])
        self.assertTrue(clerking_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state Clerking in Process")
        self.overview_pool.complete_clerking(cr, self.jdu_id, overview_id)
        clerking_activity_data = self.activity_pool.read(cr, uid, clerking_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(clerking_activity_data['state'] == 'completed', msg="Clerking Completed: State not updated correctly.")
        self.assertTrue(clerking_activity_data['date_terminated'], msg="Clerking Completed: Date terminated not registered.")
        self.assertTrue(clerking_activity_data['terminate_uid'][0] == self.jdu_id, msg="Clerking Completed: Completed by (user) not registered correctly.")
        # Patient Senior Review
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'Senior Review', msg="State is %s, it should be Senior Review" % overview_data['state'])
        review_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id[0]], ['data_model', '=', 'nh.clinical.patient.review']])
        self.assertTrue(review_activity_ids, msg="Senior Review activity not triggered after clerking")
        self.assertTrue(len(review_activity_ids) == 1, msg="There is more than one review activity for the same patient!")
        self.assertTrue(review_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state Senior Review")
        self.overview_pool.complete_review(cr, self.cu_id, overview_id)
        review_activity_data = self.activity_pool.read(cr, uid, review_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(review_activity_data['state'] == 'completed', msg="Senior Review Completed: State not updated correctly.")
        self.assertTrue(review_activity_data['date_terminated'], msg="Senior Review Completed: Date terminated not registered.")
        self.assertTrue(review_activity_data['terminate_uid'][0] == self.cu_id, msg="Senior Review Completed: Completed by (user) not registered correctly.")
        # Patient Consultant Review
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'Consultant Review', msg="State is %s, it should be Consultant Review" % overview_data['state'])
        ptwr_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id[0]], ['data_model', '=', 'nh.clinical.ptwr']])
        self.assertTrue(ptwr_activity_ids, msg="PTWR activity not triggered after senior review")
        self.assertTrue(len(ptwr_activity_ids) == 1, msg="There is more than one ptwr activity for the same patient!")
        self.assertTrue(ptwr_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state Consultant Review")
        self.overview_pool.complete_ptwr(cr, self.cu_id, overview_id)
        ptwr_activity_data = self.activity_pool.read(cr, uid, ptwr_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(ptwr_activity_data['state'] == 'completed', msg="Consultant Review Completed: State not updated correctly.")
        self.assertTrue(ptwr_activity_data['date_terminated'], msg="Consultant Review Completed: Date terminated not registered.")
        self.assertTrue(ptwr_activity_data['terminate_uid'][0] == self.cu_id, msg="Consultant Review Completed: Completed by (user) not registered correctly.")
        # Rollback Consultant Review
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'admitted', msg="State is %s, it should be admitted" % overview_data['state'])
        self.assertTrue(ptwr_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state admitted")
        self.overview_pool.rollback_ptwr(cr, uid, overview_id)
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'Consultant Review', msg="State is %s, it should be Consultant Review" % overview_data['state'])
        ptwr_activity_data = self.activity_pool.read(cr, uid, ptwr_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(ptwr_activity_data['state'] == 'scheduled', msg="Consultant Review Rollback: State not updated correctly.")
        self.assertFalse(ptwr_activity_data['date_terminated'], msg="Consultant Review Rollback: Date terminated not removed.")
        self.assertFalse(ptwr_activity_data['terminate_uid'], msg="Consultant Review Rollback: Completed by (user) not removed.")
        # Rollback Senior Review        
        self.overview_pool.rollback_action(cr, uid, overview_id)
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'Senior Review', msg="State is %s, it should be Senior Review" % overview_data['state'])
        ptwr_activity_data = self.activity_pool.read(cr, uid, ptwr_activity_ids[0], ['state'])
        self.assertTrue(ptwr_activity_data['state'] == 'cancelled', msg="Senior Review Rollback: PTWR activity not cancelled.")
        review_activity_data = self.activity_pool.read(cr, uid, review_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(review_activity_data['state'] == 'scheduled', msg="Senior Review Rollback: State not updated correctly.")
        self.assertFalse(review_activity_data['date_terminated'], msg="Senior Review Rollback: Date terminated not removed.")
        self.assertFalse(review_activity_data['terminate_uid'], msg="Senior Review Rollback: Completed by (user) not removed.")
        # Patient To be Discharged        
        self.overview_pool.to_be_discharged(cr, self.cu_id, overview_id)
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'To be Discharged', msg="State is %s, it should be To be Discharged" % overview_data['state'])
        discharge_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id[0]], ['data_model', '=', 'nh.clinical.adt.patient.discharge']])
        self.assertTrue(discharge_activity_ids, msg="Discharge activity not triggered after senior review (sent the patient to be discharged)")
        self.assertTrue(len(discharge_activity_ids) == 1, msg="There is more than one discharge activity for the same patient!")
        self.assertTrue(discharge_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state To be Discharged")
        review_activity_data = self.activity_pool.read(cr, uid, review_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(review_activity_data['state'] == 'completed', msg="Senior Review Completed: State not updated correctly.")
        self.assertTrue(review_activity_data['date_terminated'], msg="Senior Review Completed: Date terminated not updated correctly.")
        self.assertTrue(review_activity_data['terminate_uid'][0] == self.cu_id, msg="Senior Review Completed: Completed by (user) not updated correctly.")
        # Patient Discharged
        self.overview_pool.discharge(cr, self.jdu_id, overview_id)
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id', 'spell_activity_id'])
        self.assertTrue(overview_data['state'] == 'Discharged', msg="State is %s, it should be Discharged" % overview_data['state'])        
        self.assertTrue(discharge_activity_ids[0] == overview_data['activity_id'][0], msg="Overview activity pointing to the wrong activity at state Discharged")
        discharge_activity_data = self.activity_pool.read(cr, uid, discharge_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(discharge_activity_data['state'] == 'completed', msg="Discharge Completed: State not updated correctly.")
        self.assertTrue(discharge_activity_data['date_terminated'], msg="Discharge Completed: Date terminated not updated correctly.")
        self.assertTrue(discharge_activity_data['terminate_uid'][0] == self.jdu_id, msg="Discharge Completed: Completed by (user) not updated correctly.")
        spell_activity_data = self.activity_pool.read(cr, uid, overview_data['spell_activity_id'][0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(spell_activity_data['state'] == 'completed', msg="Discharge Completed: Spell state not updated correctly.")
        self.assertTrue(spell_activity_data['date_terminated'], msg="Discharge Completed: Spell date terminated not updated correctly.")
        # Rollback Discharge
        self.overview_pool.rollback_discharge(cr, uid, overview_id)
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'To be Discharged', msg="State is %s, it should be To be Discharged" % overview_data['state'])        
        discharge_activity_data = self.activity_pool.read(cr, uid, discharge_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(discharge_activity_data['state'] == 'new', msg="Discharge Rollback: State not updated correctly.")
        self.assertFalse(discharge_activity_data['date_terminated'], msg="Discharge Rollback: Date terminated not removed.")
        self.assertFalse(discharge_activity_data['terminate_uid'], msg="Discharge Rollback: Completed by (user) not removed.")
        # Rollback To be Discharged        
        self.overview_pool.rollback_action(cr, uid, overview_id)
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'Senior Review', msg="State is %s, it should be Senior Review" % overview_data['state'])
        discharge_activity_data = self.activity_pool.read(cr, uid, discharge_activity_ids[0], ['state'])
        self.assertTrue(discharge_activity_data['state'] == 'cancelled', msg="To be Discharged Rollback: Discharge activity not cancelled.")
        review_activity_data = self.activity_pool.read(cr, uid, review_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(review_activity_data['state'] == 'scheduled', msg="To be Discharged Rollback: State not updated correctly.")
        self.assertFalse(review_activity_data['date_terminated'], msg="To be Discharged Rollback: Date terminated not removed.")
        self.assertFalse(review_activity_data['terminate_uid'], msg="To be Discharged Rollback: Completed by (user) not removed.")
        # Rollback Clerking        
        self.overview_pool.rollback_action(cr, uid, overview_id)
        overview_data = self.overview_pool.read(cr, uid, overview_id[0], ['state', 'activity_id'])
        self.assertTrue(overview_data['state'] == 'To be Clerked', msg="State is %s, it should be To be Clerked" % overview_data['state'])
        review_activity_data = self.activity_pool.read(cr, uid, review_activity_ids[0], ['state'])
        self.assertTrue(review_activity_data['state'] == 'cancelled', msg="Clerking Rollback: Review activity not cancelled.")
        clerking_activity_data = self.activity_pool.read(cr, uid, clerking_activity_ids[0], ['state', 'date_terminated', 'terminate_uid'])
        self.assertTrue(clerking_activity_data['state'] == 'scheduled', msg="Clerking Rollback: State not updated correctly.")
        self.assertFalse(clerking_activity_data['date_terminated'], msg="Clerking Rollback: Date terminated not removed.")
        self.assertFalse(clerking_activity_data['terminate_uid'], msg="Clerking Rollback: Completed by (user) not removed.")

        patient_id = fake.random_element(self.patient_ids)
        spell_ids = self.activity_pool.search(cr, uid, [['data_model', '=', 'nh.clinical.spell'], ['patient_id', '=', patient_id]])
        self.assertTrue(spell_ids, msg="Test set up Failed. No spell found for the patient")
        spell_activity = self.activity_pool.browse(cr, uid, spell_ids[0])
        user_ids = False
        if self.ru_id in [user.id for user in spell_activity.user_ids]:
            user_ids = {'receptionist': self.ru_id, 'junior': self.jdu_id, 'consultant': self.cu_id}
        else:
            user_ids = {'receptionist': self.rt_id, 'junior': self.jdt_id, 'consultant': self.ct_id}

        # Patient To Come In
        tci_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id], ['data_model', '=', 'nh.clinical.patient.tci']])
        self.assertTrue(tci_activity_ids, msg="To Come In activity not triggered after admission")
        self.assertTrue(len(tci_activity_ids) == 1, msg="There is more than one tci activity for the same patient!")
        # Complete To Come In
        self.activity_pool.complete(cr, user_ids['receptionist'], tci_activity_ids[0])
        tci_activity_data = self.activity_pool.read(cr, uid, tci_activity_ids[0], ['date_terminated', 'state', 'terminate_uid'])
        self.assertTrue(tci_activity_data['state'] == 'completed', msg="To Come In Completed: State not updated correctly.")
        self.assertTrue(tci_activity_data['date_terminated'], msg="To Come In Completed: Date terminated not registered.")
        self.assertTrue(tci_activity_data['terminate_uid'][0] == user_ids['receptionist'], msg="To Come In Completed: Completed by (user) not registered correctly.")

        # Patient Clerking
        clerking_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id], ['data_model', '=', 'nh.clinical.patient.clerking']])
        self.assertTrue(clerking_activity_ids, msg="Clerking activity not triggered after tci")
        self.assertTrue(len(clerking_activity_ids) == 1, msg="There is more than one clerking activity for the same patient!")
        # Complete Clerking
        self.activity_pool.complete(cr, user_ids['junior'], clerking_activity_ids[0])
        clerking_activity_data = self.activity_pool.read(cr, uid, clerking_activity_ids[0], ['date_terminated', 'state', 'terminate_uid'])
        self.assertTrue(clerking_activity_data['state'] == 'completed', msg="Clerking Completed: State not updated correctly.")
        self.assertTrue(clerking_activity_data['date_terminated'], msg="Clerking Completed: Date terminated not registered.")
        self.assertTrue(clerking_activity_data['terminate_uid'][0] == user_ids['junior'], msg="Clerking Completed: Completed by (user) not registered correctly.")

        # Patient Review
        review_activity_ids = self.activity_pool.search(cr, uid, [['state', 'not in', ['completed', 'cancelled']], ['patient_id', '=', patient_id], ['data_model', '=', 'nh.clinical.patient.review']])
        self.assertTrue(review_activity_ids, msg="Review activity not triggered after clerking")
        self.assertTrue(len(review_activity_ids) == 1, msg="There is more than one review activity for the same patient!")
        # Complete Review
        self.activity_pool.complete(cr, user_ids['consultant'], review_activity_ids[0])
        review_activity_data = self.activity_pool.read(cr, uid, review_activity_ids[0], ['date_terminated', 'state', 'terminate_uid'])
        self.assertTrue(review_activity_data['state'] == 'completed', msg="Review Completed: State not updated correctly.")
        self.assertTrue(review_activity_data['date_terminated'], msg="Review Completed: Date terminated not registered.")
        self.assertTrue(review_activity_data['terminate_uid'][0] == user_ids['consultant'], msg="Review Completed: Completed by (user) not registered correctly.")